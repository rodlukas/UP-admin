name: CI

on:
    push:
        branches: ["master"]
    pull_request:
        branches: ["master"]

env:
    BANK_ACTIVE: false
    ENVIRONMENT: testing
    SENTRY_ORG: uspesnyprvnacek
    SENTRY_PROJECT: up-admin
    SENTRY_DSN: https://5945e623babc4c68a9fe6bd3189e2068@sentry.io/1247206
    GPR_TOKEN: ${{ secrets.GPR_TOKEN }}
    MOZ_HEADLESS: 1
    DATABASE_URL: postgresql://postgres:postgres@localhost:5432/up

jobs:
    build:
        name: Build app
        runs-on: ubuntu-latest

        steps:
            - name: "☁️ checkout repo"
              uses: actions/checkout@v3

            - name: "🔧 setup node"
              uses: actions/setup-node@v3
              with:
                  node-version: "18"
                  cache: "yarn"
                  cache-dependency-path: "**/yarn.lock"

            - name: "🔧 setup Python"
              uses: actions/setup-python@v4
              with:
                  python-version: "3.10"
                  cache: "pipenv"

            # nainstaluj geckodriver pro selenium testovani
            - name: "🔧 install geckodriver"
              run: ./scripts/shell/install_geckodriver.sh

            # spust skripty pro upravu souboru
            - name: "📝 create .npmrc file"
              run: ./scripts/shell/travis/create_npmrc.sh
            - name: "📝 string substitution"
              run: ./scripts/shell/travis/string_substitution.sh
            - name: "📝 dummy .env file"
              run: touch .env

            # nainstaluj JS zavislosti
            - name: "🔧 install JS deps & build frontend app"
              run: yarn install --frozen-lockfile

            # nainstaluj Python zavislosti
            - name: "🔧 install Python deps"
              run: |
                  pip install pipenv
                  pipenv install --dev

            - name: "🐞 debug env log"
              run:
                  node --version && npm --version && yarn --version && python --version && pipenv
                  --version && psql --version && pg_config --version && ls -la

            # spust audit frontendu
            - name: "🔍 JS: run audit"
              run: yarn run frontend:audit

            # otestuj frontend (typy, linting, jest)
            - name: "🔍 JS: run tests"
              run: yarn run frontend:test

            # otestuj typy v backendu pres mypy
            # TODO zapnout kontrolu typu na CI
            # - name: "🔍 JS: run tests"
            #  run: mypy .

            - name: Start PostgreSQL
              run: |
                  sudo systemctl start postgresql.service
                  pg_isready
            - name: Create postgres-test user
              run: |
                  sudo -u postgres psql --command="CREATE USER postgres_test PASSWORD 'postgres'" --command="\du"
            - name: Create ci_test database
              run: |
                  sudo -u postgres createdb --owner=postgres_test ci_test
                  PGPASSWORD=postgres psql --username=postgres_test --host=localhost --list ci_test

            # proved testy a spocitej pokryti kodu
            - name: "🔍 Python: run tests"
              run: pipenv run coverage run -a manage.py test
            - name: "🔍 E2E API: run tests"
              run: coverage run -a manage.py behave --stage=api --format=progress3
            - name: "🔍 E2E UI: run tests"
              run: coverage run -a manage.py behave --stage=ui --format=progress3
            - name: "🔍 Tests: generate reports"
              run: |
                  coverage report
                  coverage xml

            # posli pokryti kodu do codecov
            - name: "☁️ upload code coverage"
              run: ./scripts/shell/travis/codecov_run.sh

            # pro tagged commit: zabal frontend do zipu pro GH
            - name: "☁️ upload JS bundle to GitHub releases"
              run: ./scripts/shell/travis/create_frontend_zip.sh

            # smazani dat z buildu, testovani a dokumentace
            - name: "🧹 cleanup project folder"
              run:
                  rm -rf geckodriver geckodriver.log coverage.xml docs frontend tests node_modules
                  .idea codecov .mypy_cache
